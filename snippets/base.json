{
    "class w/unit test": {
        "prefix": "clsu",
        "body":["class ${1:Class}(${2:BaseClass}):",
            "\t\"\"\"${1/(.*)/${1:/downcase}/}\"\"\"",
            "",
            "\tdef __init__(self, ${3:arg1, arg2, arg3}, **kwargs) -> None:",
            "\t\t${4:super($1, self).__init__(**kwargs)}",
            "\t${3/([^,=]+)(?:=[^,]+)?(,\\s*|)/\tself.$1 = $1${2:+\n\t}/g}",
            "$0",
            "## For the corresponding unit test file:",
            "from ${TM_DIRECTORY/(.*)\\\\(.*)\\\\(.*)/$2.$3/}.${TM_FILENAME_BASE} import *",
            "",
            "${1/(.*)/${1:/downcase}/} = ${1}()",
            "",
            "def test_${1/(.*)/${1:/downcase}/}_${5:first_thing}():",
            "\tassert ${1/(.*)/${1:/downcase}/}.method(arg) == \"expected\""
        ],
        "description": "A class definition w/corresponding unit test code."
    },
    "class": {
        "prefix": "cls",
        "body": [
            "class ${1:ClassName}(${2:BaseClass}):",
            "\t\"\"\"${1/(.*)/${1:/downcase}/}\"\"\"",
            "",
            "\tdef __init__(self, ${3:arg1, arg2, arg3}, **kwargs) -> None:",
            "\t\tsuper($1, self).__init__(**kwargs)",
            "\t${3/([^,=]+)(?:=[^,]+)?(,\\s*|)/\tself.$1 = $1${2:+\n\t}/g}",
            "\n\t$0"
        ],
        "description" : "A basic class definition."
    },
    "data class": {
        "prefix": "clsd",
        "body": [
            "from dataclasses import dataclass\n\n",
            "@dataclass # option defaults: init=True, repr=True, eq=True, order=False, unsafe_hash=False, frozen=False",
            "class ${1:ClassName}(${2:BaseClass}):",
            "\t\"\"\"${1/(.*)/${1:/downcase}/}\"\"\"",
            "\t${4:property}: ${5:type}"
        ],
        "description": "A dataclass definition."
    },
    "enum class": {
        "prefix": "enum",
        "body": [
            "from enum import Enum, IntEnum, unique",
            "",
            "@unique",
            "class ${1:ClassName}(Enum):",
            "    ${2} = '${2:member}'",
            "    ${3} = '${3:member}'",
            "    $0",
            "",
            "    def is_${4:subset}(self):",
            "        return self in [$1.$2, $1.$3]",
            "",
            "    @classmethod",
            "    def possible_values(cls) -> str:",
            "        return ', '.join([e.name for e in cls])",
            "",
            "    @classmethod",
            "    def by_value(cls, value):",
            "        for e in cls:",
            "            if e.value == value:",
            "                return e",
            "        raise ValueError(f'No such ${1} as {value}')",
            "",
            "    @classmethod",
            "    def default_enum(cls):",
            "        return cls.${2}"

        ],
        "description": "enum definition."
    },
    "function": {
        "prefix": "def",
        "body": "def ${1:function_name}(${2:arg}):\n\t${3:pass}",
        "description" : "Function definition."
    },
    "async function": {
        "prefix": "adef",
        "body": "async def ${1:function_name}(${2:arg}):\n\t${3:pass}",
        "description" : "Async function definition."
    },
    "method": {
        "prefix": "defs",
        "body":[
            "def ${1:method_name}(self, ${2:arguments}):\n\t${3:pass}$0",
            "\t\"\"\"$1\"\"\""
        ],
        "description" : "A class method definition (function def w/self)."
    },
    "property": {
        "prefix": "property",
        "body": ["@property",
            "def ${1:foo}(self):",
            "\t\"\"\"The $1 property.\"\"\"",
            "\treturn self._$1",
            "@$1.setter",
            "def $1(self, value):",
            "\tself._$1 = value"],
        "description": "A property definition with get/set via decorator"
    },
    "for list w/index": {
        "prefix": "forlist",
        "body": [
            "for ${1:index}, ${2:element} in enumerate(${3:list}):",
            "\t# LOG.debug(\"Processing {} of {}\".format($1,len($3)))",
            "\t${4:do_something_with}($2)\n"
        ],
        "description": "For each item in a list with index (enumerate)"
    },
    "for dict w/keys": {
        "prefix": "fordict",
        "body": [
            "for ${1:key} in ${2:dict}:",
            "\t${3:value} = $2[$1]$0"
        ],
        "description": "For each item in a dictionary via the key"
    },
    "if": {
        "prefix": "if",
        "body": "if ${1:condition}:\n\t${2:pass}",
        "description" : "Basic if statement."
    },
    "for": {
        "prefix": "for",
        "body": "for ${1:element} in ${2:iterable}:\n\t${3:pass}",
        "description" : "Basic for-loop structure."
    },
    "while": {
        "prefix": "while",
        "body": "while ${1:condition}:\n\t${2:pass}$0",
        "description" : "Basic while-loop structure."
    },
    "do while": {
        "prefix": "dowhile",
        "body": "do = True\nwhile do or ${1:condition}:\n\tdo = False\n\t${2:body}",
        "description" : "A do-while loop structure."
    },
    "self": {
        "prefix": "s",
        "body": "self.$0",
        "description" : "Simple snippet for the 'self.' prefix"
    },
    "docstring": {
        "prefix": "\"\"\"",
        "body": "\"\"\"\n$0\n\"\"\"",
        "description" : "Generate the matching triple-quote."
    },
    "__magic__": {
        "prefix": "__",
        "body": "__${1:init}__$0",
        "description" : "Code snippet to create magic methods."
    },
    "read-loop until sentinel": {
        "prefix": "dosentinel",
        "body": [
            "for ${1:data} in iter(${2:partial(f.read, 32)}, ''):"
        ],
        "description": "Loop until a sentinel (terminating) value is read."
    },
    "if __name__ == \"__main__\"": {
        "prefix": "ifmain",
        "body": "if __name__ == \"__main__\":\n\t${1:main()}$0",
        "description" : "How to behave if the current Python code file is executed directly."
    },
    "lambda": {
        "prefix": "lam",
        "body": "lambda ${1:args}: ${2:expr}",
        "description": "An inline function declaration."
    },
    "dirtree": {
        "prefix": "dirtree",
        "body": ["from pathlib import Path",
            "def ${1:process_path}(current_path: Path):",
            "\t\"\"\"Recurse thru the given file path, looking for ${2|.json,.txt,.ini,.conf,.xml|} files to process.\"\"\"",
            "\tfor element in current_path.iterdir():",
            "\t\tif element.is_dir():",
            "\t\t\t$1(element)",
            "\t\telif element.is_file() and element.suffix == \"$2\":",
            "\t\t\ttxt = element.read_text()",
            "\t\t\tdata = json.loads(txt)",
            "\t\t\tdo_something_with(data)",
            "\n$1(Path.cwd())\n$0"],
            "description": "Function to recurse through a directory tree (via pathlib)."
    },
    "dircurrent": {
        "prefix": "dircurrent",
        "body": ["from pathlib import Path",
            "${1:data_path} = Path.cwd() / \"${2:subfolder_of_interest}\""],
            "description": "Get the path of the current directory (via pathlib)."
    },
    "print": {
        "prefix": "printf",
        "body": "print(f\"{} {}\".format(${1:argument1},${2:argument2})",
        "description": "Print a formatted string."
    },
    "join strings": {
        "prefix": "joinstr",
        "body": "\"${1|\\n, ,; , -- |} \".join(${2:list})",
        "description": "Join a list of strings (choosing among common separaters)."
    },
    "date math": {
        "prefix": "datemath",
        "body": [
            "${1:term} = timedelta(days=30 if monthly else 365)",
            "${2:expiry_date} = ${3:date_issued} + $1"
        ],
        "description": "Date math using timedelta."
    },
    "datetime parser": {
        "prefix": "dateparse",
        "body": ["from dateutil.parser import parse",
        "${1:datetime_value} = parse(${2:input_string}, fuzzy=${3|True,False|})"],
        "description": "Parse a datetime value out of a string."
    },
    "if arg type": {
        "prefix": "iftype",
        "body": ["if type(${1:argument}) is str:",
            "\tpass",
            "elif type($1) is list:",
            "\tpass",
            "elif type($1) is dict:",
            "\tpass",
            "elif type($1) is int:",
            "\tpass",
            "else:",
            "\tpass"],
        "description": "Act on an argument value according to its type."

    },
    "regular expression search": {
        "prefix": "regexmatch",
        "body": [
            "m = re.${1|search,match,fullmatch|}(r\"${2:pattern}\", ${3:text_str}, flags=re.MULTILINE + re.IGNORECASE)",
            "if m:",
            "\t${4:group1} = m.group(1)",
            "\t${5:group2} = m.group(2)\n"
        ],
        "description": "Regular expression search (anywhere within), match (at start), or fullmatch."
    },
    "regular expression replace": {
        "prefix": "regexreplace",
        "body": [
            "${1:text_str} = re.sub(r\"${2:pattern}\", \"${3:replacement}\", $1, flags=re.MULTILINE + re.IGNORECASE)"
        ],
        "description": "Regular expression replace."
    },
    "regular expression findall": {
        "prefix": "regexfindall",
        "body": [
            "${1:list_of_tuples} = re.findall(\"${2:pattern}\", ${3:text_str}, flags=re.MULTILINE + re.IGNORECASE)",
            "for tup in $1:",
            "\t${4:group1}, ${5:group2} = tup"
        ],
        "description": "Regular expression findall."
    },
    "write to text file": {
        "prefix": "fileio",
        "body": [
            "with Path(${1:qualified_filename}).open(\"${2:|r,w,a,x,+|}${3:|b,t|}\") as f:",
            "\tif f.${4:|readable,writeable,seekable|}():",
            "\t\t${5:result} = f.${6:|read,readall,readline,readlines,writelines|}(${6:arguments})",
            "\t\t# file is automatically closed when `with` clause exits"
        ],
        "description": "File IO (read/write)"
    },
    "digest": {
        "prefix": "digest",
        "body": [
            "import hashlib",
            "digest = hashlib.${1:|md5,sha1,sha244,sha256,sha384,sha512,blake2b,blake2s|}(open(${2:filename},'rb').read()).hexdigest()"
        ],
        "description": "Compute a digest hash of the contents of a file."
    }
}